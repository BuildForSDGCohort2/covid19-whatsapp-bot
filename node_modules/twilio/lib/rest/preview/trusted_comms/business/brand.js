'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Q = require('q');  /* jshint ignore:line */
var _ = require('lodash');  /* jshint ignore:line */
var util = require('util');  /* jshint ignore:line */
var BrandedChannelList = require('./brand/brandedChannel').BrandedChannelList;
var Page = require('../../../../base/Page');  /* jshint ignore:line */
var values = require('../../../../base/values');  /* jshint ignore:line */

var BrandList;
var BrandPage;
var BrandInstance;
var BrandContext;

/* jshint ignore:start */
/**
 * Initialize the BrandList
 *
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 *
 * @constructor Twilio.Preview.TrustedComms.BusinessContext.BrandList
 *
 * @param {Twilio.Preview.TrustedComms} version - Version of the resource
 * @param {string} businessSid - Business Sid.
 */
/* jshint ignore:end */
BrandList = function BrandList(version, businessSid) {
  /* jshint ignore:start */
  /**
   * @function brands
   * @memberof Twilio.Preview.TrustedComms.BusinessContext#
   *
   * @param {string} sid - sid of instance
   *
   * @returns {Twilio.Preview.TrustedComms.BusinessContext.BrandContext}
   */
  /* jshint ignore:end */
  function BrandListInstance(sid) {
    return BrandListInstance.get(sid);
  }

  BrandListInstance._version = version;
  // Path Solution
  BrandListInstance._solution = {businessSid: businessSid};
  /* jshint ignore:start */
  /**
   * Constructs a brand
   *
   * @function get
   * @memberof Twilio.Preview.TrustedComms.BusinessContext.BrandList#
   *
   * @param {string} sid - Brand Sid.
   *
   * @returns {Twilio.Preview.TrustedComms.BusinessContext.BrandContext}
   */
  /* jshint ignore:end */
  BrandListInstance.get = function get(sid) {
    return new BrandContext(this._version, this._solution.businessSid, sid);
  };

  /* jshint ignore:start */
  /**
   * Provide a user-friendly representation
   *
   * @function toJSON
   * @memberof Twilio.Preview.TrustedComms.BusinessContext.BrandList#
   *
   * @returns Object
   */
  /* jshint ignore:end */
  BrandListInstance.toJSON = function toJSON() {
    return this._solution;
  };

  BrandListInstance[util.inspect.custom] = function inspect(depth, options) {
    return util.inspect(this.toJSON(), options);
  };

  return BrandListInstance;
};


/* jshint ignore:start */
/**
 * Initialize the BrandPage
 *
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 *
 * @constructor Twilio.Preview.TrustedComms.BusinessContext.BrandPage
 *
 * @param {TrustedComms} version - Version of the resource
 * @param {Response<string>} response - Response from the API
 * @param {BrandSolution} solution - Path solution
 *
 * @returns BrandPage
 */
/* jshint ignore:end */
BrandPage = function BrandPage(version, response, solution) {
  // Path Solution
  this._solution = solution;

  Page.prototype.constructor.call(this, version, response, this._solution);
};

_.extend(BrandPage.prototype, Page.prototype);
BrandPage.prototype.constructor = BrandPage;

/* jshint ignore:start */
/**
 * Build an instance of BrandInstance
 *
 * @function getInstance
 * @memberof Twilio.Preview.TrustedComms.BusinessContext.BrandPage#
 *
 * @param {BrandPayload} payload - Payload response from the API
 *
 * @returns BrandInstance
 */
/* jshint ignore:end */
BrandPage.prototype.getInstance = function getInstance(payload) {
  return new BrandInstance(this._version, payload, this._solution.businessSid);
};

/* jshint ignore:start */
/**
 * Provide a user-friendly representation
 *
 * @function toJSON
 * @memberof Twilio.Preview.TrustedComms.BusinessContext.BrandPage#
 *
 * @returns Object
 */
/* jshint ignore:end */
BrandPage.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};

BrandPage.prototype[util.inspect.custom] = function inspect(depth, options) {
  return util.inspect(this.toJSON(), options);
};


/* jshint ignore:start */
/**
 * Initialize the BrandContext
 *
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 *
 * @constructor Twilio.Preview.TrustedComms.BusinessContext.BrandInstance
 *
 * @property {string} accountSid - Account Sid.
 * @property {string} businessSid - Business Sid.
 * @property {string} sid - Brand Sid.
 * @property {string} links - Nested resource URLs.
 * @property {string} url - The URL of this resource.
 *
 * @param {TrustedComms} version - Version of the resource
 * @param {BrandPayload} payload - The instance payload
 * @param {sid} businessSid - Business Sid.
 * @param {sid} sid - Brand Sid.
 */
/* jshint ignore:end */
BrandInstance = function BrandInstance(version, payload, businessSid, sid) {
  this._version = version;

  // Marshaled Properties
  this.accountSid = payload.account_sid; // jshint ignore:line
  this.businessSid = payload.business_sid; // jshint ignore:line
  this.sid = payload.sid; // jshint ignore:line
  this.links = payload.links; // jshint ignore:line
  this.url = payload.url; // jshint ignore:line

  // Context
  this._context = undefined;
  this._solution = {businessSid: businessSid, sid: sid || this.sid, };
};

Object.defineProperty(BrandInstance.prototype,
  '_proxy', {
    get: function() {
      if (!this._context) {
        this._context = new BrandContext(this._version, this._solution.businessSid, this._solution.sid);
      }

      return this._context;
    }
});

/* jshint ignore:start */
/**
 * fetch a BrandInstance
 *
 * @function fetch
 * @memberof Twilio.Preview.TrustedComms.BusinessContext.BrandInstance#
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed BrandInstance
 */
/* jshint ignore:end */
BrandInstance.prototype.fetch = function fetch(callback) {
  return this._proxy.fetch(callback);
};

/* jshint ignore:start */
/**
 * Access the brandedChannels
 *
 * @function brandedChannels
 * @memberof Twilio.Preview.TrustedComms.BusinessContext.BrandInstance#
 *
 * @returns {Twilio.Preview.TrustedComms.BusinessContext.BrandContext.BrandedChannelList}
 */
/* jshint ignore:end */
BrandInstance.prototype.brandedChannels = function brandedChannels() {
  return this._proxy.brandedChannels;
};

/* jshint ignore:start */
/**
 * Provide a user-friendly representation
 *
 * @function toJSON
 * @memberof Twilio.Preview.TrustedComms.BusinessContext.BrandInstance#
 *
 * @returns Object
 */
/* jshint ignore:end */
BrandInstance.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};

BrandInstance.prototype[util.inspect.custom] = function inspect(depth, options)
    {
  return util.inspect(this.toJSON(), options);
};


/* jshint ignore:start */
/**
 * Initialize the BrandContext
 *
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 *
 * @constructor Twilio.Preview.TrustedComms.BusinessContext.BrandContext
 *
 * @property {Twilio.Preview.TrustedComms.BusinessContext.BrandContext.BrandedChannelList} brandedChannels -
 *          brandedChannels resource
 *
 * @param {TrustedComms} version - Version of the resource
 * @param {sid} businessSid - Business Sid.
 * @param {sid} sid - Brand Sid.
 */
/* jshint ignore:end */
BrandContext = function BrandContext(version, businessSid, sid) {
  this._version = version;

  // Path Solution
  this._solution = {businessSid: businessSid, sid: sid, };
  this._uri = `/Businesses/${businessSid}/Brands/${sid}`;

  // Dependents
  this._brandedChannels = undefined;
};

/* jshint ignore:start */
/**
 * fetch a BrandInstance
 *
 * @function fetch
 * @memberof Twilio.Preview.TrustedComms.BusinessContext.BrandContext#
 *
 * @param {function} [callback] - Callback to handle processed record
 *
 * @returns {Promise} Resolves to processed BrandInstance
 */
/* jshint ignore:end */
BrandContext.prototype.fetch = function fetch(callback) {
  var deferred = Q.defer();
  var promise = this._version.fetch({uri: this._uri, method: 'GET'});

  promise = promise.then(function(payload) {
    deferred.resolve(new BrandInstance(
      this._version,
      payload,
      this._solution.businessSid,
      this._solution.sid
    ));
  }.bind(this));

  promise.catch(function(error) {
    deferred.reject(error);
  });

  if (_.isFunction(callback)) {
    deferred.promise.nodeify(callback);
  }

  return deferred.promise;
};

Object.defineProperty(BrandContext.prototype,
  'brandedChannels', {
    get: function() {
      if (!this._brandedChannels) {
        this._brandedChannels = new BrandedChannelList(
          this._version,
          this._solution.businessSid,
          this._solution.sid
        );
      }
      return this._brandedChannels;
    }
});

/* jshint ignore:start */
/**
 * Provide a user-friendly representation
 *
 * @function toJSON
 * @memberof Twilio.Preview.TrustedComms.BusinessContext.BrandContext#
 *
 * @returns Object
 */
/* jshint ignore:end */
BrandContext.prototype.toJSON = function toJSON() {
  return this._solution;
};

BrandContext.prototype[util.inspect.custom] = function inspect(depth, options) {
  return util.inspect(this.toJSON(), options);
};

module.exports = {
  BrandList: BrandList,
  BrandPage: BrandPage,
  BrandInstance: BrandInstance,
  BrandContext: BrandContext
};
