/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import TrustedComms = require('../../TrustedComms');
import { BrandedChannelList } from './brand/brandedChannel';
import { BrandedChannelListInstance } from './brand/brandedChannel';
import { SerializableClass } from '../../../../interfaces';

/**
 * Initialize the BrandList
 *
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 *
 * @param version - Version of the resource
 * @param businessSid - Business Sid.
 */
declare function BrandList(version: TrustedComms, businessSid: string): BrandListInstance;

interface BrandListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): BrandContext;
  /**
   * Constructs a brand
   *
   * @param sid - Brand Sid.
   */
  get(sid: string): BrandContext;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

interface BrandPayload extends BrandResource, Page.TwilioResponsePayload {
}

interface BrandResource {
  account_sid: string;
  business_sid: string;
  links: string;
  sid: string;
  url: string;
}

interface BrandSolution {
  businessSid?: string;
}


declare class BrandContext {
  /**
   * Initialize the BrandContext
   *
   * PLEASE NOTE that this class contains preview products that are subject to
   * change. Use them with caution. If you currently do not have developer preview
   * access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param businessSid - Business Sid.
   * @param sid - Brand Sid.
   */
  constructor(version: TrustedComms, businessSid: string, sid: string);

  brandedChannels: BrandedChannelListInstance;
  /**
   * fetch a BrandInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: BrandInstance) => any): Promise<BrandInstance>;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}


declare class BrandInstance extends SerializableClass {
  /**
   * Initialize the BrandContext
   *
   * PLEASE NOTE that this class contains preview products that are subject to
   * change. Use them with caution. If you currently do not have developer preview
   * access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param businessSid - Business Sid.
   * @param sid - Brand Sid.
   */
  constructor(version: TrustedComms, payload: BrandPayload, businessSid: string, sid: string);

  private _proxy: BrandContext;
  accountSid: string;
  /**
   * Access the brandedChannels
   */
  brandedChannels(): BrandedChannelListInstance;
  businessSid: string;
  /**
   * fetch a BrandInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: BrandInstance) => any): Promise<BrandInstance>;
  links: string;
  sid: string;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  url: string;
}


declare class BrandPage extends Page<TrustedComms, BrandPayload, BrandResource, BrandInstance> {
  /**
   * Initialize the BrandPage
   *
   * PLEASE NOTE that this class contains preview products that are subject to
   * change. Use them with caution. If you currently do not have developer preview
   * access, please contact help@twilio.com.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: TrustedComms, response: Response<string>, solution: BrandSolution);

  /**
   * Build an instance of BrandInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: BrandPayload): BrandInstance;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

export { BrandContext, BrandInstance, BrandList, BrandListInstance, BrandPage, BrandPayload, BrandResource, BrandSolution }
